{
  "question": [
    {
      "id": 0,
      "group": "VANILLAJS",
      "type": 0,
      "title": "JavaScript là gì ",
      "answer": [
        {
          "id": 1,
          "_name": "Là ngôn ngữ lập trình thông dịch thường được sử dụng để tạo các trang web tương tác và các ứng dụng web"
        },
        {
          "id": 2,
          "_name": "Là ngôn ngữ lập trình siêu băn bản thường được sử dụng để tạo các trang web tương tác và các ứng dụng web"
        },
        {
          "id": 3,
          "_name": "Là ngôn ngữ lập trình bậc thấp thường được sử dụng để tạo các trang web tương tác và các ứng dụng web"
        },
        {
          "id": 4,
          "_name": "Là ngôn ngữ đánh dấu thường được sử dụng để tạo các trang web tương tác và các ứng dụng web"
        }
      ]
    },
    {
      "id": 1,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Cách để sử dụng JS trong HTML ",
      "answer": [
        {
          "id": 1,
          "_name": "Viết mã JS trong cặp thẻ style"
        },
        {
          "id": 2,
          "_name": "Viết mã JS trong cặp thẻ script"
        },
        {
          "id": 3,
          "_name": "Link bằng thẻ script và src"
        },
        {
          "id": 4,
          "_name": "Link bằng thẻ style và src"
        }
      ]
    },
    {
      "id": 2,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Các cách khai báo biến trong JS",
      "answer": [
        {
          "id": 1,
          "_name": "const, var , let"
        },
        {
          "id": 2,
          "_name": "string ,const ,init"
        },
        {
          "id": 3,
          "_name": "let ,var ,static"
        },
        {
          "id": 4,
          "_name": "int ,string , var"
        }
      ]
    },
    {
      "id": 3,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Scope của biến trong JS là gì",
      "answer": [
        {
          "id": 1,
          "_name": "Phạm vi xác định vị trí trong mã mà biến có thể truy cập được. JavaScript có phạm vi toàn cục và phạm vi cục bộ."
        },
        {
          "id": 2,
          "_name": "Phạm vi xác định vị trí trong mã mà biến có thể truy cập được. JavaScript có phạm vi toàn cục"
        },
        {
          "id": 3,
          "_name": "Phạm vi xác định vị trí trong mã mà biến có thể truy cập được. JavaScript có phạm vi cục bộ."
        }
      ]
    },
    {
      "id": 4,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Hoisting trong JS là gì",
      "answer": [
        {
          "id": 1,
          "_name": "Hoisting là một tính năng trong JavaScript cho phép bạn truy cập biến trước khi chúng được khai báo trong mã."
        },
        {
          "id": 2,
          "_name": "Hoisting là một tính năng trong JavaScript cho phép bạn chỉnh sửa biến trước khi chúng được khai báo trong mã."
        },
        {
          "id": 3,
          "_name": "Hoisting là một tính năng trong JavaScript cho phép bạn xoá biến trước khi chúng được khai báo trong mã."
        },
        {
          "id": 4,
          "_name": "Hoisting là một tính năng trong JavaScript cho phép bạn truy cập và gán biến trước khi chúng được khai báo trong mã."
        }
      ]
    },
    {
      "id": 5,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Có bao nhiêu kiểu dữ liệu cơ bản trong JavaScript ?",
      "answer": [
        {
          "id": 1,
          "_name": "2"
        },
        {
          "id": 2,
          "_name": "5"
        },
        {
          "id": 3,
          "_name": "7"
        },
        {
          "id": 4,
          "_name": "10"
        }
      ]
    },
    {
      "id": 6,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Các cách kiểm tra kiểu dữ liệu trong JS",
      "answer": [
        {
          "id": 1,
          "_name": "Toán tử checkType"
        },
        {
          "id": 2,
          "_name": "Toán tử instanceof"
        },
        {
          "id": 3,
          "_name": "Object.prototype.toString"
        },
        {
          "id": 4,
          "_name": "Array.isArray()"
        },
        {
          "id": 5,
          "_name": "Toán tử typeof"
        }
      ]
    },
    {
      "id": 7,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Phạm vi của hàm (function scope) là gì",
      "answer": [
        {
          "id": 1,
          "_name": "Đề cập đến phạm vi hoạt động của biến khi chúng được khai báo bên trong một hàm"
        },
        {
          "id": 2,
          "_name": "Đề cập đến phạm vi hoạt động của biến khi chúng được khai báo ngay bên trên một hàm"
        },
        {
          "id": 3,
          "_name": "Đề cập đến phạm vi hoạt động của biến khi chúng được khai báo ngay bên dưới một hàm"
        }
      ]
    },
    {
      "id": 8,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Closure là gì",
      "answer": [
        {
          "id": 1,
          "_name": "Closure đề cập đến khả năng của một hàm nội tại (inner function) được tạo bên trong một hàm bên ngoài (outer function) để truy cập và thay đổi các biến của hàm bên ngoài, ngay cả sau khi hàm bên ngoài đã hoàn thành thực thi"
        },
        {
          "id": 2,
          "_name": "Closure cho phép lưu trữ trạng thái và dữ liệu của một hàm trong một ngữ cảnh cụ thể, và nó thường được sử dụng để tạo ra các biến riêng tư và xây dựng các hàm callback."
        },
        {
          "id": 3,
          "_name": " Nó đề cập đến khả năng của một hàm (function) trong JS để truy cập và lưu trữ biến từ phạm vi cha (enclosing scope) của nó, ngay cả sau khi hàm đã kết thúc thực thi"
        }
      ]
    },
    {
      "id": 9,
      "group": "VANILLAJS",
      "type": 1,
      "title": "JSON là gì ?",
      "answer": [
        {
          "id": 1,
          "_name": "Là một kiểu định dạng dữ liệu"
        },
        {
          "id": 2,
          "_name": "Là một phương thức"
        },
        {
          "id": 3,
          "_name": "Là một đối tượng"
        },
        {
          "id": 4,
          "_name": "Là một thuộc tính"
        }
      ]
    },
    {
      "id": 10,
      "group": "VANILLAJS",
      "type": 0,
      "title": "JSON.parse() dùng để làm gì",
      "answer": [
        {
          "id": 1,
          "_name": "Để chuyển từ JSON sang một đối tượng JS"
        },
        {
          "id": 2,
          "_name": "Để chuyển từ một đối tượng JS sang JSON"
        }
      ]
    },
    {
      "id": 11,
      "group": "VANILLAJS",
      "type": 0,
      "title": "JSON.stringify() dùng để làm gì",
      "answer": [
        {
          "id": 1,
          "_name": "Để chuyển từ một đối tượng JS sang JSON"
        },
        {
          "id": 2,
          "_name": "Để chuyển từ JSON sang một đối tượng JS"
        }
      ]
    },
    {
      "id": 12,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Các cách để truy cập và thay đổi các phần tử trong một mảng trong JavaScript?",
      "answer": [
        {
          "id": 1,
          "_name": "Sử dụng index( chỉ số của mảng)"
        },
        {
          "id": 2,
          "_name": "Sử dụng các phương thức mảng"
        },
        {
          "id": 3,
          "_name": "Sử dụng vòng lặp"
        },
        {
          "id": 4,
          "_name": "Sử dụng key"
        }
      ]
    },
    {
      "id": 13,
      "group": "VANILLAJS",
      "type": 0,
      "title": "JS có phải là ngôn ngữ đơn luồng",
      "answer": [
        {
          "id": 1,
          "_name": "Đúng"
        },
        {
          "id": 2,
          "_name": "Sai"
        }
      ]
    },
    {
      "id": 14,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Bất đồng bộ là gì",
      "answer": [
        {
          "id": 1,
          "_name": "là một khái niệm để chỉ việc thực hiện các tác vụ mà không chờ đợi một tác vụ khác hoàn thành trước."
        },
        {
          "id": 2,
          "_name": "một khái niệm để chỉ việc thực hiện các tác vụ mà phải chờ đợi một tác vụ khác hoàn thành trước."
        }
      ]
    },
    {
      "id": 15,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Đồng bộ là gì",
      "answer": [
        {
          "id": 1,
          "_name": "là một khái niệm để chỉ việc thực hiện các tác vụ mà phải chờ đợi một tác vụ khác hoàn thành trước."
        },
        {
          "id": 2,
          "_name": "là một khái niệm để chỉ việc thực hiện các tác vụ mà không chờ đợi một tác vụ khác hoàn thành trước."
        }
      ]
    },
    {
      "id": 16,
      "group": "VANILLAJS",
      "type": 0,
      "title": "undefined và null khác nhau như thế nào",
      "answer": [
        {
          "id": 1,
          "_name": "undefined thường được biểu thị là không xác định còn null thường được biểu thị là rỗng"
        },
        {
          "id": 2,
          "_name": "undefined thường được biểu thị là rỗng còn null thường được biểu thị là không xác định"
        }
      ]
    },
    {
      "id": 17,
      "group": "VANILLAJS",
      "type": 0,
      "title": "ES6 được phát hành vào năm",
      "answer": [
        {
          "id": 1,
          "_name": "2015"
        },
        {
          "id": 2,
          "_name": "2016"
        },
        {
          "id": 3,
          "_name": "2017"
        },
        {
          "id": 4,
          "_name": "2014"
        }
      ]
    },
    {
      "id": 18,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Toán tử Spread trong javascript ?",
      "answer": [
        {
          "id": 1,
          "_name": "cho phép bạn rải các phần tử của một mảng hoặc các thuộc tính của một đối tượng vào một vị trí mới."
        },
        {
          "id": 2,
          "_name": "cho phép bạn nối các phần tử của một mảng hoặc các thuộc tính của một đối tượng với một đối tượng khác"
        },
        {
          "id": 3,
          "_name": "cho phép bạn xoá các phần tử của một mảng hoặc các thuộc tính của một đối tượng trong một đối tượng khác"
        },
        {
          "id": 4,
          "_name": "cho phép bạn gom các phần tử của một mảng hoặc các thuộc tính của một đối tượng vào một vị trí mới."
        }
      ]
    },
    {
      "id": 19,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Toán tử Rest trong javascript ?",
      "answer": [
        {
          "id": 1,
          "_name": "cho phép bạn gom các phần tử của một mảng hoặc các thuộc tính của một đối tượng vào một vị trí mới."
        },
        {
          "id": 2,
          "_name": "cho phép bạn nối các phần tử của một mảng hoặc các thuộc tính của một đối tượng với một đối tượng khác"
        },
        {
          "id": 3,
          "_name": "cho phép bạn xoá các phần tử của một mảng hoặc các thuộc tính của một đối tượng trong một đối tượng khác"
        },
        {
          "id": 4,
          "_name": "cho phép bạn rải các phần tử của một mảng hoặc các thuộc tính của một đối tượng vào một vị trí mới."
        }
      ]
    },
    {
      "id": 20,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Sự khác biệt của Function Declaration và Function Expression là gì",
      "answer": [
        {
          "id": 1,
          "_name": "declare"
        },
        {
          "id": 2,
          "_name": "hoisting"
        },
        {
          "id": 3,
          "_name": "scope"
        },
        {
          "id": 4,
          "_name": "return"
        },
        {
          "id": 5,
          "_name": "param"
        },
        {
          "id": 6,
          "_name": "argument"
        }
      ]
    },
    {
      "id": 21,
      "group": "VANILLAJS",
      "type": 0,
      "title": "@media có tác dụng gì",
      "answer": [
        {
          "id": 1,
          "_name": "là một công cụ cho việc thiết kế trang web có khả năng tương thích màn hình"
        },
        {
          "id": 2,
          "_name": "là một công cụ cho việc ghi đè các VANILLAJS khác"
        },
        {
          "id": 3,
          "_name": "là một công cụ hỗ trợ người dùng tuỳ chỉnh phần tử HTML"
        },
        {
          "id": 4,
          "_name": "là một công cụ cho việc sử dụng VANILLAJS trong HTML"
        }
      ]
    },
    {
      "id": 22,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Trong một hàm toàn cục, giá trị của this thường là ",
      "answer": [
        {
          "id": 1,
          "_name": "đối tượng window "
        },
        {
          "id": 2,
          "_name": "trình duyệt"
        },
        {
          "id": 3,
          "_name": "hàm gần ngay trên nó"
        },
        {
          "id": 4,
          "_name": "đối tượng ngay trên nó"
        }
      ]
    },
    {
      "id": 23,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Strict mode trong javascript là gì?",
      "answer": [
        {
          "id": 1,
          "_name": "một tính năng giúp bạn viết mã JavaScript an toàn hơn bằng việc áp đặt một số quy tắc nghiêm ngặt và kiểm tra lỗi."
        },
        {
          "id": 2,
          "_name": "một tính năng giúp bạn viết mã JavaScript an toàn hơn bằng việc áp đặt một số quy tắc về tên biến , hàm."
        },
        {
          "id": 3,
          "_name": "một tính năng giúp bạn viết mã JavaScript an toàn hơn bằng việc áp đặt một số quy tắc về đối tượng"
        },
        {
          "id": 4,
          "_name": "một tính năng giúp bạn viết mã JavaScript an toàn hơn bằng việc áp đặt một số quy tắc về cách gọi hàm"
        }
      ]
    },
    {
      "id": 24,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Câu đúng về Promise trong javascript là gì ?",
      "answer": [
        {
          "id": 1,
          "_name": "Là một cơ chế để xử lý các tác vụ bất đồng bộ (asynchronous) một cách dễ đọc và hiệu quả hơn"
        },
        {
          "id": 2,
          "_name": "là một đối tượng đại diện cho một giá trị hoặc kết quả sẽ trả về trong tương lai từ một tác vụ bất đồng bộ"
        },
        {
          "id": 3,
          "_name": "Có 3 trạng thái Pending , Fulfilled, Rejected"
        },
        {
          "id": 4,
          "_name": "Promise giải quyết ngay lập tức sau khi được tạo"
        },
        {
          "id": 5,
          "_name": "Promise ra đời thay thế hoàn toàn callback"
        }
      ]
    },
    {
      "id": 25,
      "group": "VANILLAJS",
      "type": 0,
      "title": "Khi gọi this trong arrow fn tại trong một fn khác",
      "answer": [
        {
          "id": 1,
          "_name": "this là đối tượng fn nó khai báo"
        },
        {
          "id": 2,
          "_name": "this là đối tượng nó dùng"
        },
        {
          "id": 3,
          "_name": "this là đối tượng window"
        }
      ]
    },
    {
      "id": 26,
      "group": "VANILLAJS",
      "type": 1,
      "title": "Các giá trị nào sau đây không phải là Falsy trong JS ",
      "answer": [
        {
          "id": 1,
          "_name": "0"
        },
        {
          "id": 2,
          "_name": "false"
        },
        {
          "id": 3,
          "_name": "chuỗi rỗng"
        },
        {
          "id": 4,
          "_name": "NaN"
        },
        {
          "id": 5,
          "_name": "-0"
        },
        {
          "id": 6,
          "_name": "undefined"
        },
        {
          "id": 7,
          "_name": "null"
        },
        {
          "id": 8,
          "_name": "0n"
        },
        {
          "id": 9,
          "_name": "1"
        },{
          "id": 10,
          "_name": "'false'"
        },{
          "id": 11,
          "_name": "'0'"
        }
      ]
    }
  ],
  "answer": [
    {
      "id": 0,
      "answer": [
        {
          "id": 4
        }
      ]
    },
    {
      "id": 1,
      "answer": [
        {
          "id": 2
        },{
          "id": 3
        }
      ]
    },
    {
      "id": 2,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 3,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 4,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 5,
      "answer": [
        {
          "id": 9
        }
      ]
    },
    {
      "id": 6,
      "answer": [
        {
          "id": 2
        },
        {
          "id": 3
        }, {
          "id": 5
        }
      ]
    },
    {
      "id": 7,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 8,
      "answer": [
        {
          "id": 1
        },{
          "id": 2
        }
      ]
    },
    {
      "id": 9,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 10,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 11,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 12,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 13,
      "answer": [
        {
          "id": 1
        }, {
          "id": 2
        }
      ]
    },
    {
      "id": 14,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 15,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 16,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 17,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 18,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 19,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 20,
      "answer": [
        {
          "id": 1
        },{
          "id": 2
        },{
          "id": 3
        }
      ]
    },
    {
      "id": 21,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 22,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 23,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 24,
      "answer": [
        {
          "id": 1
        }, {
          "id": 2
        }, {
          "id": 3
        }
      ]
    },
    {
      "id": 25,
      "answer": [
        {
          "id": 1
        }
      ]
    },
    {
      "id": 26,
      "answer": [
        {
          "id": 9
        },
        {
          "id": 10
        },
        {
          "id": 11
        }
      ]
    }
  ]
}
